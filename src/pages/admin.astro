---
import BaseLayout from "../layouts/BaseLayout.astro";

const pageTitle = "Dashboard";
const state = false;
---

<BaseLayout pageTitle={pageTitle} state={state}>
  <h1
    class="text-center pt-16 pb-8 mb-4 text-4xl text-gray-900 dark:text-white"
  >
    {pageTitle}
  </h1>
  <br />
  <div class="flex justify-center items-start min-h-screen space-x-4">
    <ul
      class="flex flex-col space-y-4 text-sm font-medium text-gray-500 dark:text-gray-400"
    >
      <li>
        <button
          class="tablinks p-4 text-center inline-flex items-center px-4 py-3 rounded-lg hover:text-gray-900 bg-gray-50 hover:bg-gray-100 w-full dark:bg-gray-800 dark:hover:bg-gray-700 dark:hover:text-white"
          data-tab="listCandit"
        >
          Candidatos
        </button>
      </li>
      <li>
        <button
          class="tablinks p-4 text-center inline-flex items-center px-4 py-3 rounded-lg hover:text-gray-900 bg-gray-50 hover:bg-gray-100 w-full dark:bg-gray-800 dark:hover:bg-gray-700 dark:hover:text-white"
          data-tab="seeElections"
        >
          Elecciones
        </button>
      </li>
      <li>
        <button
          class="tablinks p-4 text-center inline-flex items-center px-4 py-3 rounded-lg hover:text-gray-900 bg-gray-50 hover:bg-gray-100 w-full dark:bg-gray-800 dark:hover:bg-gray-700 dark:hover:text-white"
          data-tab="seeList"
        >
          Listas
        </button>
      </li>
      <li>
        <button
          class="tablinks p-4 text-center inline-flex items-center px-4 py-3 rounded-lg hover:text-gray-900 bg-gray-50 hover:bg-gray-100 w-full dark:bg-gray-800 dark:hover:bg-gray-700 dark:hover:text-white"
          data-tab="seeVote"
        >
          Votos
        </button>
      </li>
      <!-- <li> -->
      <!--   <button -->
      <!--     class="tablinks p-4 text-center inline-flex items-center px-4 py-3 rounded-lg hover:text-gray-900 bg-gray-50 hover:bg-gray-100 w-full dark:bg-gray-800 dark:hover:bg-gray-700 dark:hover:text-white" -->
      <!--     data-tab="createElection" -->
      <!--   > -->
      <!--     Crear elecciones -->
      <!--   </button> -->
      <!-- </li> -->
    </ul>

    <div
      class="p-6 bg-gray-50 text-gray-500 dark:text-gray-400 dark:bg-gray-800 rounded-lg w-3/4"
    >
      <div id="default" class="tabcontent">
        <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-2">
          Profile Tab
        </h3>
        <p class="mb-2">
          This is some placeholder content the Profile tab's associated content.
        </p>
      </div>
      <div
        id="listCandit"
        class="tabcontent hidden relative overflow-x-auto shadow-md sm:rounded-lg"
      >
        <table
          class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400"
        >
          <thead
            class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"
          >
            <tr>
              <th scope="col" class="px-6 py-3">Nombres</th>
              <th scope="col" class="px-6 py-3">Apellido Paterno</th>
              <th scope="col" class="px-6 py-3">Apellido Materno</th>
              <th scope="col" class="px-6 py-3">Nombre de la Lista</th>
            </tr>
          </thead>
          <tbody id="candidates-table-body">
            <tr>
              <td colspan="4" class="text-center">Cargando datos...</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div
        id="seeElections"
        class="tabcontent hidden relative overflow-x-auto shadow-md sm:rounded-lg"
      >
        <table
          class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400"
        >
          <thead
            class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"
          >
            <tr>
              <th scope="col" class="px-6 py-3">Fecha</th>
              <th scope="col" class="px-6 py-3">Hora Inicio</th>
              <th scope="col" class="px-6 py-3">Hora Fin</th>
              <th scope="col" class="px-6 py-3">Descripción</th>
            </tr>
          </thead>
          <tbody id="electios-table-body">
            <tr>
              <td colspan="4" class="text-center">Cargando datos...</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div
        id="seeList"
        class="tabcontent hidden relative overflow-x-auto shadow-md sm:rounded-lg"
      >
        <table
          class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400"
        >
          <thead
            class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"
          >
            <tr>
              <th scope="col" class="px-6 py-3">Nombre</th>
              <th scope="col" class="px-6 py-3">Eleccion ID</th>
              <th scope="col" class="px-6 py-3">Propuesta</th>
              <th scope="col" class="px-6 py-3">ID</th>
            </tr>
          </thead>
          <tbody id="list-table-body">
            <tr>
              <td colspan="4" class="text-center">Cargando datos...</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div id="seeVote" class="tabcontent hidden">
        <h1 class="text-gray-100">Ver votos</h1>
      </div>
      <div id="createElection" class="tabcontent hidden">
        <h1 class="text-gray-100">Crear elección</h1>
      </div>
    </div>
  </div>
  <script>
    const userData = JSON.parse(sessionStorage.getItem("userInfo"));

    const adminConfirm = () => {
      if (!userData) {
        window.location.href = "/login";
      }
      if (userData.type_user !== "admin") {
        window.location.href = "/login";
      }
    };

    adminConfirm();

    const fetchCandidates = async () => {
      try {
        const response = await fetch("http://localhost:8000/candidato/", {
          method: "GET",
          headers: {
            Accept: "application/json",
          },
        });
        if (response.ok) {
          return await response.json();
        } else {
          console.error("Error al obtener candidatos:", response.statusText);
          return [];
        }
      } catch (error) {
        console.error("Error en la solicitud:", error);
        return [];
      }
    };

    const fetchLists = async () => {
      try {
        const response = await fetch("http://localhost:8000/lista/", {
          method: "GET",
          headers: {
            Accept: "application/json",
          },
        });

        if (response.ok) {
          return await response.json();
        } else {
          return [];
        }
      } catch (error) {
        console.error("Error en la solicitud: ", error);
        return [];
      }
    };

    const fetchElections = async () => {
      const token = sessionStorage.getItem("token");
      try {
        const response = await fetch("http://localhost:8000/eleccion/", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            Accept: "application/json",
          },
        });

        if (response.ok) {
          return await response.json();
        } else {
          return [];
        }
      } catch (error) {
        console.error("Error en la solicitud: ", error);
        return [];
      }
    };

    const renderCandidates = async () => {
      const candidates = await fetchCandidates();
      const tableBody = document.getElementById("candidates-table-body");

      if (candidates.length > 0) {
        tableBody.innerHTML = candidates
          .map(
            (candidate) => `
            <tr class="odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 border-b dark:border-gray-700">
              <td class="px-6 py-4">${candidate.candidato.nombres}</td>
              <td class="px-6 py-4">${candidate.candidato.apellido_paterno}</td>
              <td class="px-6 py-4">${candidate.candidato.apellido_materno}</td>
              <td class="px-6 py-4">${candidate.nombre_lista}</td>
            </tr>
          `,
          )
          .join("");
      } else {
        tableBody.innerHTML = `
          <tr>
            <td colspan="4" class="text-center">No hay candidatos disponibles.</td>
          </tr>
        `;
      }
    };

    const renderList = async () => {
      const lists = await fetchLists();
      const tableBody = document.getElementById("list-table-body");

      if (lists.length > 0) {
        tableBody.innerHTML = lists
          .map(
            (lista) =>
              `<tr class="odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 border-b dark:border-gray-700"> 
                    <td class="px-6 py-4">${lista.nombre}</td>
                    <td class="px-6 py-4">${lista.id_eleccion}</td>
                    <td class="px-6 py-4">${lista.propuesta}</td>
                    <td class="px-6 py-4">${lista.id}</td> 
            </tr>`,
          )
          .join("");
      } else {
        tableBody.innerHTML = `
          <tr>
            <td colspan="4" class="text-center">No hay listas disponibles.</td>
          </tr>
        `;
      }
    };

    const renderElections = async () => {
      const elections = await fetchElections();
      const tableBody = document.getElementById("electios-table-body");

      if (elections.length > 0) {
        tableBody.innerHTML = elections
          .map(
            (elec) => `
            <tr class="odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 border-b dark:border-gray-700">
              <td class="px-6 py-4">${elec.fecha}</td>
              <td class="px-6 py-4">${elec.hora_inicio}</td>
              <td class="px-6 py-4">${elec.hora_fin}</td>
              <td class="px-6 py-4">${elec.descripcion}</td>
            </tr>
          `,
          )
          .join("");
      } else {
        tableBody.innerHTML = `
          <tr>
            <td colspan="4" class="text-center">No hay elecciones disponibles.</td>
          </tr>
        `;
      }
    };

    document.addEventListener("DOMContentLoaded", function () {
      const tabButtons = document.querySelectorAll(".tablinks");

      tabButtons.forEach((button) => {
        button.addEventListener("click", function () {
          const tabName = this.getAttribute("data-tab");
          openTab(tabName);
        });
      });

      renderCandidates();
      renderList();
      renderElections();
    });

    function openTab(tabName) {
      var tabcontent = document.getElementsByClassName("tabcontent");
      for (var i = 0; i < tabcontent.length; i++) {
        tabcontent[i].classList.add("hidden");
      }

      var tablinks = document.getElementsByClassName("tablinks");
      for (var i = 0; i < tablinks.length; i++) {
        tablinks[i].classList.remove("active");
      }

      document.getElementById(tabName).classList.remove("hidden");
      const activeButton = Array.from(tablinks).find(
        (link) => link.getAttribute("data-tab") === tabName,
      );
      if (activeButton) {
        activeButton.classList.add("focus:outline-none");
      }
    }
  </script>
</BaseLayout>
